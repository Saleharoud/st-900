version: '3.8'

services:
  st900-gps-tracker:
    build: .
    container_name: st900-gps-tracker
    restart: unless-stopped
    ports:
      - "8090:8090"  # TCP port for GPS trackers
      - "3000:3000"  # HTTP API port
    environment:
      - NODE_ENV=production
      - TCP_HOST=0.0.0.0
      - TCP_PORT=8090
      - HTTP_HOST=0.0.0.0
      - HTTP_PORT=3000
      - DATABASE_PATH=/app/data/gps_tracker.db
      - LOG_LEVEL=info
      - MAX_CONNECTIONS=100
      - CONNECTION_TIMEOUT=1800000
    volumes:
      - ./data:/app/data          # Persist database
      - ./logs:/app/logs          # Persist logs
    networks:
      - st900-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) }).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Optional: Add PostgreSQL for production use
  # Uncomment this section if you want to use PostgreSQL instead of SQLite
  # postgres:
  #   image: postgres:15-alpine
  #   container_name: st900-postgres
  #   restart: unless-stopped
  #   environment:
  #     POSTGRES_DB: gps_tracker
  #     POSTGRES_USER: gps_user
  #     POSTGRES_PASSWORD: your_secure_password
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #   networks:
  #     - st900-network
  #   ports:
  #     - "5432:5432"

  # Optional: Add Redis for caching and session management
  # redis:
  #   image: redis:7-alpine
  #   container_name: st900-redis
  #   restart: unless-stopped
  #   networks:
  #     - st900-network
  #   ports:
  #     - "6379:6379"

  # Optional: Add Nginx reverse proxy
  # nginx:
  #   image: nginx:alpine
  #   container_name: st900-nginx
  #   restart: unless-stopped
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./nginx.conf:/etc/nginx/nginx.conf:ro
  #     - ./ssl:/etc/nginx/ssl:ro
  #   networks:
  #     - st900-network
  #   depends_on:
  #     - st900-gps-tracker

networks:
  st900-network:
    driver: bridge

volumes:
  # Uncomment if using PostgreSQL
  # postgres_data:
  #   driver: local
  
  # Local volumes are created automatically for ./data and ./logs